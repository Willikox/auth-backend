// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?
  role      String  @default("USER")
  isBlocked    Boolean  @default(false)

  totpEnabled  Boolean  @default(false)
  totpSecret   String?
  totTempSecret String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]

  PasswordReset PasswordReset[]
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tokenHash  String   
  ip         String?
  userAgent  String?

  createdAt  DateTime @default(now())
  revokedAt  DateTime?
  expiresAt  DateTime

  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String   
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  ip        String?
  userAgent String?
  metadata  Json?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model PasswordReset {
  id         String   @id @default(cuid())
  userId     String
  tokenHash  String
  expiresAt  DateTime
  usedAt     DateTime?
  user       User     @relation(fields: [userId], references: [id])
  @@index([userId])
}
